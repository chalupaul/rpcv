version: 2.1
deploy_defaults: &deploy_defaults
  executor: sam_build
  environment:
    AWS_DEFAULT_REGION: us-west-2
orbs:
  aws-cli: circleci/aws-cli@0.1.19
executors:
  sam_build:
    docker:
      - image: chalupaul/sambuild:latest
commands:
  build_prep:
    description: "Set up auth and S3 for stage: << parameters.stage >>"
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/setup:
          profile-name: vdo-rpcv-<< parameters.stage >>
          aws-access-key-id: AWS_ACCESS_KEY_ID_<< parameters.stage >>
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY_<< parameters.stage >>
      - run:
          name: Ensure S3 bucket
          command: |
            aws s3api head-bucket \
            --profile vdo-rpcv-<< parameters.stage >> \
            --bucket "vdo-rpcv-<< parameters.stage >>" >/dev/null 2>&1 \
            || aws s3 mb \
            --profile vdo-rpcv-<< parameters.stage >> \
            --region us-west-2 \
            s3://"vdo-rpcv-<< parameters.stage >>"
      - persist_to_workspace:
          root: ~/.aws
          paths:
            - "*"
      - restore_cache:
          keys:
            - deps-<< parameters.stage >>-{{ checksum "poetry.lock" }}
      - run:
          name: install poetry deps
          command: |
            poetry install
      - save_cache:
          key: deps-<< parameters.stage >>-{{ checksum "poetry.lock" }}
          paths:
            - ~/.cache/pypoetry/virtualenvs
      - restore_cache:
          keys:
            - deplayer-<< parameters.stage >>-
      - run:
          name: build dependency lambda layer
          command: |
            poetry run ci-gen-deps
            mkdir -p ./dependencies/python/lib/python3.8/site-packages
            pip install -r ~/lambda-layer-requirements.txt -t ./dependencies/python/lib/python3.8/site-packages
      - save_cache:
          paths:
            - ./dependencies
          key: deplayer-<< parameters.stage >>-{{ checksum "poetry.lock" }}
  unit_test:
    description: Run unit tests
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - deps-<< parameters.stage >>-{{ checksum "poetry.lock" }}  
      - run:
          name: Run unit tests
          command: |
            poetry run coverage run -m --branch --omit='*/virtualenvs/*,*/tests/*' pytest ./rpcv/tests/
  unit_coverage_test:
    description: Run unit tests with coverage
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: ~/.aws
      - restore_cache:
          keys:
            - deps-<< parameters.stage >>-{{ checksum "poetry.lock" }}
      - restore_cache:
          keys:
            - rpcv-coverage-<< parameters.stage >>-
      - run:
          name: Generate previous coverage report
          command: |
            target=$(poetry run ci-get-last-coverage)
            echo "export target=${target}" >> $BASH_ENV
            echo "Previous test coverage percentage: ${target}"
      - run:
          name: Run unit tests
          command: |
            poetry run coverage run -m --branch --omit='*/virtualenvs/*,*/tests/*' pytest ./rpcv/tests/
      - run:
          name: Check coverage percentage
          command: |
            poetry run coverage report -m --fail-under=${target}
      - save_cache:
          paths:
            - .coverage
          key: rpcv-coverage-<< parameters.stage >>-{{ checksum ".coverage" }}
  gate_test:
    description: All the tests!
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: ~/.aws
      - restore_cache:
          keys:
            - deps-<< parameters.stage >>-{{ checksum "poetry.lock" }}
      - run:
          name: Run gate tests
          environment:
            STAGE: << parameters.stage >>
            REGION: us-west-2
          command: |
            poetry run doit -n 4 -f ./util/gate_tests.py
  sam_deploy:
    description: Deploy rpcv for stage << parameters.stage >>
    parameters:
      stage:
        type: string
    steps:
      - attach_workspace:
          at: ~/.aws
      - checkout
      - restore_cache:
          keys:
            - deplayer-<< parameters.stage >>-
      - restore_cache:
          keys:
            - sam-metadata-<< parameters.stage >>-
      - run:
          name: Deploy app
          command: |
            sam deploy --debug \
            --stack-name rpcv-api-<< parameters.stage >> \
            --s3-prefix << parameters.stage >> \
            --s3-bucket vdo-rpcv-<< parameters.stage >> \
            --profile vdo-rpcv-<< parameters.stage >> \
            --region us-west-2 \
            --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM CAPABILITY_IAM \
            --parameter-overrides Stage=<< parameters.stage >> \
            --no-fail-on-empty-changeset \
            --template ./template.yaml
      - save_cache:
          key: sam-metadata-<< parameters.stage >>-{{ checksum "~/.aws-sam/metadata.json" }}
          paths:
            - ~/.aws-sam
jobs:
  dev_gate_tests:
    <<: *deploy_defaults
    steps:
      - gate_test:
          stage: dev
  dev_unit_coverage_tests:
    <<: *deploy_defaults
    steps:
      - unit_coverage_test:
          stage: dev
  dev_build_prep:
    <<: *deploy_defaults
    steps:
      - build_prep:
          stage: dev
  dev_deploy:
    <<: *deploy_defaults
    steps:
      - sam_deploy:
          stage: dev
workflows:
  release:dev:
    jobs:
      - dev_build_prep
      - dev_gate_tests:
          requires:
            - dev_build_prep
      - dev_unit_coverage_tests:
          requires:
            - dev_build_prep
      - dev_deploy:
          requires:
            - dev_gate_tests
            - dev_unit_coverage_tests
